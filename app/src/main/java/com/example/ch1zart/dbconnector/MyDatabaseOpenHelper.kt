package com.example.ch1zart.dbconnector

import android.content.Context
import android.database.sqlite.SQLiteDatabase
import com.example.ch1zart.fitnessapp.R
import org.jetbrains.anko.db.*

class UserInfo {
    val table_name = "UserInfo"
    val id = "_id"
    val email = "Email"
    val password = "Password"
    val login = "LogIn"
}

class Notes {
    val table_name = "Notes"
    val id = "_id"
    val note_name = "Note_name"
    val discription = "Discription"
    val date = "Date"
    val ownerID = "owner"
}

open class ClassExample {
    open val table_name: String = ""
    open val id: String =  "_id"
    open val title: String = "title"
    open val subtitle: String = "subtitle"
    open val detail: String = "detail"
    open val photoID: String = "photo"
}

class Emergencycases: ClassExample() {
    override val table_name: String = "Emergencycases"
}

class SeaPositionsInfo: ClassExample() {
    override val table_name: String = "SeaPositionsInfo"
}

class Theory: ClassExample() {
    override val table_name: String = "Theory"
}

class Rules: ClassExample() {
    override val table_name: String = "Rules"
}


class MyDatabaseOpenHelper(ctx: Context) : ManagedSQLiteOpenHelper(ctx, "MyDatabase", null, 1) {

    override fun getDatabaseName(): String {
        return super.getDatabaseName()
    }

    companion object {

        private var instance: MyDatabaseOpenHelper? = null
        private val ut = UserInfo()
        private val spi = SeaPositionsInfo()
        private val nt = Notes()
        private val tt = Theory()
        private val et = Emergencycases()
        private val rt = Rules()

        @Synchronized
        fun getInstance(ctx: Context): MyDatabaseOpenHelper {

            if (instance == null) {
                //  instance = MyDatabaseOpenHelper(ctx.getApplicationContext())
                instance = MyDatabaseOpenHelper(ctx.applicationContext)
            }

            return instance!!
        }
    }

    override fun onCreate(db: SQLiteDatabase) {

        createNoteTable(db)
        createUserTable(db)
        createPositionTable(db, spi)
        createTheoryTable(db,tt)
        createEmercyTable(db, et)
        createRulesTable(db, rt)
}

    fun createUserTable(db: SQLiteDatabase) {
        db.createTable(ut.table_name, true, ut.id to INTEGER + PRIMARY_KEY, ut.email to TEXT, ut.password to INTEGER,  ut.login to INTEGER)
    }

    fun createNoteTable(db: SQLiteDatabase) {
        db.createTable(nt.table_name, true, nt.id to INTEGER + PRIMARY_KEY, nt.note_name to TEXT, nt.date to INTEGER, nt.discription to TEXT, nt.ownerID to INTEGER)
    }

    fun  createRulesTable(db: SQLiteDatabase,c: ClassExample) {
        db.createTable(c.table_name, true, c.id to INTEGER + PRIMARY_KEY, c.title to TEXT, c.subtitle to TEXT, c.detail to TEXT, c.photoID to INTEGER)
        db.insert(c.table_name, c.title to "1.1.Порядок применения правил", c.subtitle to "1. Общие положения", c.detail to "1.1.1. Настоящие Правила предназначены для обеспечения безопасности труда плавсостава и распространяются на все суда и плавсредства Министерства морского флота, находящиеся в эксплуатации, ремонте и отстое." +
                "Примечания: 1. Отступления от настоящих Правил допускаются только при выполнении работ на судах и плавсредствах, терпящих бедствие или работающих по спасению, при обязательном выполнении всех возможных мер безопасности.", c.photoID to R.drawable.unlocked)
        db.insert(c.table_name, c.title to "1.1.Порядок применения правил", c.subtitle to "1. Общие положения", c.detail to "2. На суда технического флота, кроме требований настоящих Правил, распространяются требования специальных правил техники безопасности для судов технического флота.", c.photoID to R.drawable.unlocked)
        db.insert(c.table_name, c.title to "1.1.Порядок применения правил", c.subtitle to "1. Общие положения", c.detail to "1.1.2. В развитие настоящих Правил пароходствами должны быть разработаны и выданы на суда инструкции по технике безопасности для всех профессий рядового плавсостава. Типовые инструкции ММФ для отдельных профессий должны быть положены в основу инструкций, составленных с учетом специфики данного пароходства и особенностей каждой серии судов. Все действующие инструкции должны быть приведены пароходствами в соответствие с настоящими Правилами.", c.photoID to R.drawable.unlocked)
        db.insert(c.table_name, c.title to "1.1.Порядок применения правил", c.subtitle to "1. Общие положения", c.detail to "1.1.3.Администрация судна обязана изучить полученные от пароходства инструкции и при необходимости дополнить их положениями, отражающими изменение условий плавания, специфику груза и т.п.", c.photoID to R.drawable.unlocked)
        db.insert(c.table_name, c.title to "1.1.Порядок применения правил", c.subtitle to "1. Общие положения", c.detail to "1.1.4. Во всех инструкциях по эксплуатации оборудования должны быть указаны конкретные меры техники безопасности, предупреждающие случаи травматизма при его использовании. На все основные виды ремонтно-профилактических работ на судах пароходствами должны быть составлены технологические карты, учитывающие безопасные методы работы. Технологические карты должны быть составлены также на основные виды палубных работ, в которых сохраняется постоянная последовательность операций (спуск-подъем шлюпок, заваливание и вываливание забортных трапов, спуск-подъем трапа для приемки лоцмана, открывание и закрывание крышек трюмов, выемка-установка или укладка на груз собранных щитов шифтинг-бордсов). В технологических картах должны указываться оборудование и оснастка, последовательность технологических операций, расстановка работающих в процессе выполнения работ и меры безопасности.", c.photoID to R.drawable.unlocked)
        db.insert(c.table_name, c.title to "1.1. Порядок применения правил", c.subtitle to "1. Общие положения", c.detail to "1.1.5. Настоящими Правилами должен быть обеспечен весь комсостав судна. Правила следует учитывать как инвентарь судна.", c.photoID to R.drawable.unlocked)

        db.insert(c.table_name, c.title to "1.2. Обучение технике безопасности и требования к личному составу", c.subtitle to "1. Общие положения", c.detail to "1.2.1. Командный состав судов (включая первых помощников капитана и судовых врачей) обязан изучить настоящие Правила и проходить ежегодную проверку знаний настоящих Правил в соответствии с Положением (приложение I - не приводится).", c.photoID to R.drawable.unlocked)
        db.insert(c.table_name, c.title to "1.2. Обучение технике безопасности и требования к личному составу", c.subtitle to "1. Общие положения", c.detail to "1.2.2. Весь личный состав судов должен пройти инструктаж и обучение по технике безопасности в соответствии с действующим в ММФ Положением (приложение II - не приводится).", c.photoID to R.drawable.unlocked)
        db.insert(c.table_name, c.title to "1.2. Обучение технике безопасности и требования к личному составу", c.subtitle to "1. Общие положения", c.detail to "1.2.3. Рядовой состав судов обязан изучить инструкции по технике безопасности в соответствии со своей профессией и выполняемой работой. При поступлении на судно знания проверяют: у членов палубной команды и обслуживающего персонала - старший помощник капитана, у членов машинной команды - старший механик; повторно проверки знаний производятся не реже двух раз в год.", c.photoID to R.drawable.unlocked)
        db.insert(c.table_name, c.title to "1.2. Обучение технике безопасности и требования к личному составу", c.subtitle to "1. Общие положения", c.detail to "1.2.4. К самостоятельной работе на судне и обслуживанию механизмов допускаются лица не моложе восемнадцати лет. Они должны:иметь удостоверение (свидетельство) о прохождении квалификационной комиссии и медицинскую книжку с отметкой или свидетельство о пригодности к работе по состоянию здоровья, выдаваемые бассейновой или портовой поликлиникой; Твердо знать инструкции по технике безопасности и обслуживанию поручаемых им механизмов; Уметь правильно пользоваться защитными и предохранительными приспособлениями, необходимыми в процессе работы; Уметь оказывать первую помощь при несчастных случаях.", c.photoID to R.drawable.unlocked)
        db.insert(c.table_name, c.title to "1.2. Обучение технике безопасности и требования к личному составу", c.subtitle to "1. Общие положения", c.detail to "1.2.5. Ни один вновь поступающий член экипажа рядового состава не может быть направлен на судно, если он не прошел вводный инструктаж по технике безопасности, лица командного состава - без проверки знаний Правил техники безопасности и других руководящих документов по охране труда, проводимой в комиссиях при пароходствах. Без первичного инструктажа на рабочем месте и проверки знаний по профессии пришедший на судно член экипажа рядового состава не может быть допущен к выполнению судовых работ.  Примечание. Первый помощник капитана и судовой врач при поступлении на работу должны пройти вводный инструктаж, а по приходе на судно - получить от капитана общий инструктаж о специфике и характере работы судна.", c.photoID to R.drawable.unlocked)
        db.insert(c.table_name, c.title to "1.2. Обучение технике безопасности и требования к личному составу", c.subtitle to "1. Общие положения", c.detail to "1.2.6. Все члены экипажа судна должны быть проинструктированы по безопасной работе на прачечном оборудовании (стиральных машинах, центрифугах и др.) и прочем бытовом оборудовании, предназначенном для самообслуживания.", c.photoID to R.drawable.unlocked)

        db.insert(c.table_name, c.title to "1.3. Ответственность за соблюдение Правил техники безопасности на судне", c.subtitle to "1. Общие положения", c.detail to "1.3.1. Ответственность за соблюдение настоящих Правил на судне несет капитан. Он обязан лично и через своих помощников и начальников служб (старшего помощника капитана, старшего механика, начальника рации, судового врача и др.) проводить мероприятия по оздоровлению условий труда экипажа, учитывая конкретные условия, и принимать все необходимые меры для предупреждения случаев травматизма. Капитан обязан систематически контролировать выполнение членами экипажа правил и инструкций по технике безопасности и прохождение инструктажа всем рядовым составом судна. При оформлении трудового соглашения в последнем должны быть отражены вопросы ответственности за охрану труда администрации судна и грузополучателя.", c.photoID to R.drawable.unlocked)
        db.insert(c.table_name, c.title to "1.3. Ответственность за соблюдение Правил техники безопасности на судне", c.subtitle to "1. Общие положения", c.detail to "1.3.2. Каждый член командного состава судна отвечает за безопасность труда членов экипажа в соответствии с Уставом службы на судах морского флота Союза ССР и обязан контролировать выполнение личным составом судна правил и инструкций по технике безопасности, инструктировать подчиненных ему лиц и обучать их безопасным методам работы.", c.photoID to R.drawable.unlocked)
        db.insert(c.table_name, c.title to "1.3. Ответственность за соблюдение Правил техники безопасности на судне", c.subtitle to "1. Общие положения", c.detail to "1.3.3. Контроль и ответственность за соблюдение правил техники безопасности во время выполнения работ возлагаются на члена командного состава (старшего, среднего или младшего), непосредственно возглавляющего эту работу или давшего непосредственное распоряжение рядовым членам экипажа о ее выполнении. Руководитель работ обязан: обеспечить выполнение работ строго в соответствии с настоящими Правилами; Лично проверить надежность и исправность всех применяемых приспособлений и инструментов, а также средств индивидуальной защиты; Инструктировать лиц, участвующих в работах, по вопросам технологии и безопасности их выполнения, а также правильному использованию средств индивидуальной защиты; Р" +
                "асстанавливать работающих в соответствии с их квалификацией и характером работы.Примечание. В случае выполнения явно опасных работ (в штормовых условиях, в замкнутых тесных пространствах, в помещениях, содержащих вредные газы, и т.п.) или редко исполняемых (ввод судна в док, аварийные работы и др.) внеочередной инструктаж должен провести старший помощник капитана или старший механик (по принадлежности).", c.photoID to R.drawable.unlocked)
        db.insert(c.table_name, c.title to "1.3. Ответственность за соблюдение Правил техники безопасности на судне", c.subtitle to "1. Общие положения", c.detail to "1.3.4. Вахтенные помощник капитана и механик обязаны вести общий надзор за соблюдением правил техники безопасности при стоянке судна в порту, на рейде и в ремонте.", c.photoID to R.drawable.unlocked)
        db.insert(c.table_name, c.title to "1.3. Ответственность за соблюдение Правил техники безопасности на судне", c.subtitle to "1. Общие положения", c.detail to "1.3.5. Ответственность за техническое состояние судовых трапов, штормтрапов и сходней, а также спасательных шкентелей с мусингами несет старший помощник капитана.Ответственность за техническое состояние всех трапов в МКО и насосных отделениях несет старший механик. Ответственность за безопасную установку трапов и сходней несет старший помощник капитана, а за правильную их эксплуатацию во время стоянки судна - вахтенный помощник капитана.", c.photoID to R.drawable.unlocked)
        db.insert(c.table_name, c.title to "1.3. Ответственность за соблюдение Правил техники безопасности на судне", c.subtitle to "1. Общие положения", c.detail to "1.3.6. Ответственность за безопасность погрузочно-разгрузочных работ, производимых береговыми организациями, но с использованием судовых грузоподъемных средств, несет организация, производящая работы (если ответственность не оговорена договорным обязательством).", c.photoID to R.drawable.unlocked)

    }

        fun createEmercyTable(db: SQLiteDatabase,c: ClassExample)
    {
        db.createTable(c.table_name, true, c.id to INTEGER + PRIMARY_KEY, c.title to TEXT, c.subtitle to TEXT, c.detail to TEXT, c.photoID to INTEGER)
        db.insert(c.table_name, c.title to "Общесудовая тревога", c.subtitle to "Виды тревог", c.detail to "Семь коротких звуков и следующих за ними одного продолжительного звукового сигнала", c.photoID to R.drawable.unlocked)
        db.insert(c.table_name, c.title to "Человек за бортом", c.subtitle to "Виды тревог", c.detail to "Три продолжительных сигнала звонком громкого боя (продолжительность сигнала 5-6 секунд), сигнал повторяется 3-4 раза", c.photoID to R.drawable.unlocked)
        db.insert(c.table_name, c.title to "Радиационная опасность", c.subtitle to "Виды тревог", c.detail to "Один короткий и два продолжительных звука, повторяется 3 раза с интервалом 2 с и сопровождается сообщением по громкоговорящей связи", c.photoID to R.drawable.unlocked)
        db.insert(c.table_name, c.title to "Шлюпочная тревога", c.subtitle to "Виды тревог", c.detail to "Семь коротких и один продолжительный сигнал звонком громкого боя, сигнал повторяется 3-4 раза", c.photoID to R.drawable.unlocked)
        db.insert(c.table_name, c.title to "Химическая тревога", c.subtitle to "Виды тревог", c.detail to "Четыре коротких и один продолжительный звук, повторяется 3 раза с интервалом 2 с и сопровождается сообщением по громкоговорящей связи", c.photoID to R.drawable.unlocked)

        db.insert(c.table_name, c.title to "Готовность экипажа к действиям", c.subtitle to "Безопастность груза и окружающей среды", c.detail to "Постоянного наличия на борту установленного количества экипажа, способного обеспечить эффективные действия в случае возникновения чрезвычайных ситуаций.", c.photoID to R.drawable.unlocked)
        db.insert(c.table_name, c.title to "Готовность экипажа к действиям", c.subtitle to "Безопастность жизни", c.detail to "Высокой профессиональной квалификации экипажа, предварительной тренажерной подготовки, регулярных и эффективных учебных тревог, учений, тренировок", c.photoID to R.drawable.unlocked)
        db.insert(c.table_name, c.title to "Готовность экипажа к действиям", c.subtitle to "Безопастность жизни", c.detail to "Эффективной системы и организации действий, включая Расписание по тревогам, аварийные партии, судовые оперативные планы действий (Vessel Response Plans), контрольные листы рекомендованных действий (Check Lists) для всех выявленных рисков с учетом специфики и конструктивных особенностей судна, особенностей и свойств перевозимых грузов", c.photoID to R.drawable.unlocked)
        db.insert(c.table_name, c.title to "Готовность экипажа к действиям", c.subtitle to "Безопастность судна", c.detail to "Постоянной готовности средств борьбы за живучесть судна", c.photoID to R.drawable.unlocked)
        db.insert(c.table_name, c.title to "Готовность экипажа к действиям", c.subtitle to "Безопастность груза и окружающей среды", c.detail to "Постоянного контроля и наблюдения (в том числе - с помощью специальных систем контроля и предупредительной сигнализации) за основными элементами безопасности, обнаружения очага чрезвычайной ситуации на возможно более ранней стадии, а также быстрых, решительных, эффективных действий человека, первым обнаружившего возникновение чрезвычайной ситуации", c.photoID to R.drawable.unlocked)



        //  db.insert(et.table_name, et.problem to "течет вода", et.whatToDo to "Закрой кран")
    }
    fun createPositionTable(db: SQLiteDatabase,c: ClassExample) {
        db.createTable(c.table_name, true, c.id to INTEGER + PRIMARY_KEY, c.title to TEXT, c.subtitle to TEXT, c.detail to TEXT, c.photoID to INTEGER)

      //  db.insert(c.table_name, c.title to "Старший механик", c.subtitle to "Старший механик подчиняется капитану и является его заместителем по техническому обслуживанию судна." +
       // "Указания и распоряжения старшего механика по вопросам эксплуатации технических средств судна обязательны для исполнения всеми членами экипажа.", c.detail to " sss", c.photoID to INTEGER)
        db.insert(c.table_name, c.title to "Второй механик", c.subtitle to "Второй механик подчиняется старшему механику и является его первым заместителем", c.detail to "false", c.photoID to R.drawable.unlocked)
        db.insert(c.table_name, c.title to "Третий механик", c.subtitle to "Третий механик подчиняется второму механику и в необходимых случаях замещает его", c.detail to "true", c.photoID to R.drawable.unlocked)
       // db.insert(c.table_name, c.title to "Четвертый механик", c.subtitle to "Четвертый механик подчиняется второму механику и в необходимых случаях замещает третьего механика." +
       // "Он отвечает за техническое состояние якорного, швартовного, буксирного и других палубных устройств и механизмов судна, грузовых устройств и средств передачи грузов на корабли.", c.detail to "false", c.photoID to R.drawable.unlocked)
        db.insert(c.table_name, c.title to "Механик (по судовым системам)", c.subtitle to "Механик (по судовым системам) подчиняется второму механику и в необходимых случаях замещает четвертого механика.", c.detail to "false",c.photoID to R.drawable.unlocked)
        db.insert(c.table_name, c.title to "Механик по ремонту оборудования", c.subtitle to "Он отвечает за техническое состояние и готовность к использованию станков и оборудования механической мастерской, электросварочного и газосварочного оборудования, а на судах, имеющих вертолеты, кроме того, за оборудование ангаров и технических средств обслуживания вертолетов.", c.detail to "false", c.photoID to R.drawable.unlocked)
        db.insert(c.table_name, c.title to "Механик рефрижераторных установок", c.subtitle to "Он отвечает за техническое состояние и надежную работу рефрижераторных установок и систем кондиционирования воздуха со всеми обслуживающими их техническими средствами, контрольно-измерительными приборами и автоматикой.", c.detail to "false",c.photoID to R.drawable.unlocked)
       // db.insert(c.table_name, c.title to "Электромеханик (на судах без электродвижения)", c.subtitle to "Он отвечает за техническое состояние и готовность к использованию всего электрооборудования судна, включая электростанции, распределительные устройства, электроприводы всех механизмов, электрические схемы средств автоматизации и контроля, телефонной связи, систем сигнализации, а также источники питания радиотехнических средств и электрифицированных механизмов общего пользования.", c.detail to "false",c.photoID to R.drawable.unlocked)
        db.insert(c.table_name, c.title to "Второй электромеханик (на электроходах)", c.subtitle to "Он отвечает за техническое состояние и надежную работу рефрижераторных установок и систем кондиционирования воздуха со всеми обслуживающими их техническими средствами, контрольно-измерительными приборами и автоматикой.", c.detail to "false",c.photoID to R.drawable.unlocked)
        db.insert(c.table_name, c.title to "Третий электромеханик (на электроходах)", c.subtitle to "Он отвечает за техническое состояние и готовность к использованию вспомогательных и аварийных генераторов и их электроприводов, электрооборудования палубных механизмов, подруливающего устройства и электрической части котельной автоматики.", c.detail to "false",c.photoID to R.drawable.unlocked)
        db.insert(c.table_name, c.title to "Четвертый электромеханик (на электроходах)", c.subtitle to "Он отвечает за техническое состояние и надежную работу кабельных сетей, размагничивающих устройств, электрических вентиляторов, тифонов, преобразователей, электрооборудования камбуза, внутреннего и наружного освещения, в том числе аварийного, ходовых и якорных огней, прожекторов и приборов ночного видения.", c.detail to "false",c.photoID to R.drawable.unlocked)
        db.insert(c.table_name, c.title to "Сменный механик", c.subtitle to "Он отвечает за управление главными двигателями и техническими средствами, обеспечивающими безопасность судна и его нормальную эксплуатацию.", c.detail to "false", c.photoID to R.drawable.unlocked)

    }

    fun createTheoryTable(db: SQLiteDatabase,c: ClassExample)
    {
        db.createTable(c.table_name, true, c.id to INTEGER + PRIMARY_KEY, c.title to TEXT, c.subtitle to TEXT, c.detail to TEXT, c.photoID to INTEGER)
        db.insert(tt.table_name, c.title to "3.0 Техническое обслуживание судовых технических средств", c.subtitle to "3.1 Порядок проведения работ по техническому обслуживанию.", c.detail to "3.1.1. Техническое обслуживание (ТО) СТС должно осуществляться по планово-предупредительной системе на основе месячных (рейсовых) планов ТО. План ТО составляется по заведованиям под контролем старшего механика и утверждается капитаном.",c.photoID to R.drawable.unlocked)
        db.insert(tt.table_name,c.title to "3.0 Техническое обслуживание судовых технических средств", c.subtitle to "3.1 Порядок проведения работ по техническому обслуживанию.", c.detail to "3.1.2. Периодичность технического обслуживания должна соответствовать периодичности, указанной в инструкции или типовом плане-графике, с отклонениями, учитывающими установленный ПГТО допуск на периодичность и возможность выполнения работ по условиям плавания. В обоснованных случаях старший механик по согласованию с судовладельцем может корректировать установленную инструкцией или типовым планом-графиком периодичность работ с учетом фактического состояния технического средства и " +
                "режимов его использования. В гарантийный период эксплуатации корректировка периодичности ТО, установленная заводской инструкцией, не допускается.",c.photoID to R.drawable.unlocked)
        db.insert(tt.table_name, c.title to "3.0 Техническое обслуживание судовых технических средств", c.subtitle to "3.1 Порядок проведения работ по техническому обслуживанию.", c.detail to "3.1.3. Контроль за выполнением работ по ТО, приемка и сдача объектов должны производиться в соответствии с Положением о ТЭФ.",c.photoID to R.drawable.unlocked)
        db.insert(tt.table_name,c.title to "3.0 Техническое обслуживание судовых технических средств", c.subtitle to "3.1 Порядок проведения работ по техническому обслуживанию.", c.detail to "3.1.4. Выполнение работ по ТО СТС должно быть отражено в машинном журнале и ПГТО в соответствии с инструкциями по их ведению. Общие сведения по ТО СТС отражаются в техническом отчете судна.При выполнении работ по ТО должна быть произведена оценка технического состояния СТС путем осмотра состояния рабочих поверхностей, замера зазоров, просадок, осевых разбегов, проверки состояния регулировки и т. д. Результаты оценки" +
                " должны быть занесены в журнал учета технического состояний; оборудования с указанием даты и наработки технического средства, сборочной единицы или детали." + " Записи в журнал вносит лицо командного состава, в чьем заведовании находятся технические средства. Оно же несет ответственность за полноту и правильность записей. Старший механик должен осуществлять контроль за соблюдением правил ведения журнала",c.photoID to R.drawable.unlocked)

        db.insert(tt.table_name, c.title to "3.6 Техническое обслуживание вспомогательных механизмов и оборудования", c.subtitle to "3.6.1 Указания по техническому обслуживанию отдельных механизмов и аппаратов.", c.detail to "1.1. Разборка и сборка вспомогательных механизмов и оборудования в каждом отдельном случае должны производиться в сроки и в технологической последовательности, предусмотренной инструкцией завода-изготовителя, техническими условиями на ремонт или руководством по ремонту данного механизма, а также с учетом общих требований, изложенных в подразделе 3.1",c.photoID to R.drawable.unlocked)
        db.insert(tt.table_name, c.title to "3.6 Техническое обслуживание вспомогательных механизмов и оборудования", c.subtitle to "3.6.1 Указания по техническому обслуживанию отдельных механизмов и аппаратов.", c.detail to "1.2. При осмотре деталей насосов необходимо: выявить возможные дефекты шеек валов в районе уплотнений и подшипников скольжения (риски, задиры и пр.), а также проверить состояние валов насосов, подшипников качения, их посадку в корпус" +
                "и на валах; проверить крепление насосов к фундаментам, а трубопроводов и воздушных колпаков P к насосам; проверить легкость вращения валов в подшипниках (без заметного люфта); проверить крепление соединительных муфт, состояние арматуры и контрольно-измерительных приборов. При монтаже и переборках насоса следует избегать чрезмерных усилии присоединении трубопроводов и затяжке фундаментных болтов. Это может привести к нарушению центровки, повышенным износам насоса или другим повреждениям.",c.photoID to R.drawable.unlocked)
        db.insert(tt.table_name, c.title to "3.6 Техническое обслуживание вспомогательных механизмов и оборудования", c.subtitle to "3.6.1 Указания по техническому обслуживанию отдельных механизмов и аппаратов.", c.detail to "1.3. При осмотре центробежных насосов необходимо проверить состояние поверхностей и входных кромок лопаток рабочих колес. При осмотре вихревых насосом следует обращать внимание па величину бокового зазора между роторами и секциями.",c.photoID to R.drawable.unlocked)
        db.insert(tt.table_name, c.title to "3.6 Техническое обслуживание вспомогательных механизмов и оборудования",c.subtitle to "3.6.1 Указания по техническому обслуживанию отдельных механизмов и аппаратов.", c.detail to "1.4. В шестеренных насосах следует замерить зазоры в подшипниках и шестернях, а также между шестернями и корпусом.При разборке винтовых и шестеренных насосов необходимо замаркировать зубья шестерен, положение винтов относительно друг друга и корпуса для обеспечения правильности сборки.",c.photoID to R.drawable.unlocked)
        db.insert(tt.table_name,c.title to "3.6 Техническое обслуживание вспомогательных механизмов и оборудования", c.subtitle to "3.6.1 Указания по техническому обслуживанию отдельных механизмов и аппаратов.", c.detail to "1.5. При осмотре струйных насосов особое внимание следует обращать на состояние (износ) сопел, соосность рабочих конусов и на отложения накипи. Очистку конусов и сопел следует производить только деревянными палочками или проволокой из красной меди.",c.photoID to R.drawable.unlocked)
        db.insert(tt.table_name,c.title to "3.6 Техническое обслуживание вспомогательных механизмов и оборудования", c.subtitle to "3.6.1 Указания по техническому обслуживанию отдельных механизмов и аппаратов.", c.detail to "1.6. При сборке эжектора необходимо обеспечить соосность сопла и диффузора, не допускать повреждений стенок и кромок сопел, обеспечить,воздухонепроницаемость частей корпуса эжектора в местах их соединений и составного диффузора.",c.photoID to R.drawable.unlocked)
        db.insert(tt.table_name, c.title to "3.6 Техническое обслуживание вспомогательных механизмов и оборудования", c.subtitle to "3.6.1 Указания по техническому обслуживанию отдельных механизмов и аппаратов.", c.detail to "1.7. При разборке и осмотре вентиляторов необходимо:проверить плотность посадки рабочего колеса на валу и состояние шпоночных гнезд, заклепочных (сварных) соединений лопаток с дисками, проверить отсутствие на лопатках трещин, вмятин, прогибов; проверить радиальные зазоры между крылаткой и корпусом и торцевые зазоры между крылаткой и крышками корпуса; проверить состояние и износ подшипников и шеек вала.",c.photoID to R.drawable.unlocked)


        db.insert(tt.table_name, c.title to "3.9 Техническое обслуживание газотурбинных установок.", c.subtitle to "3.9.1 Общие указания.", c.detail to "1.1 Нормативная периодичность ТО ГГТА определяется утвержденными судовладельцем ПГТО, инструкцией по ТО (ИТО) заводов-изготовителей сборочных единиц агрегата.",c.photoID to R.drawable.unlocked)
        db.insert(tt.table_name, c.title to "3.9 Техническое обслуживание газотурбинных установок.", c.subtitle to "3.9.1 Общие указания.", c.detail to "1.2 Нормативные сроки между ТО ГГТА могут быть изменены судовладельцем и зависимости от технического состояния и условий эксплуатации агрегата.",c.photoID to R.drawable.unlocked)
        db.insert(tt.table_name, c.title to "3.9 Техническое обслуживание газотурбинных установок.", c.subtitle to "3.9.1 Общие указания.", c.detail to "1.3 Выявленные в процессе ТЭ неисправности ГГТА, дефекты отдельных деталей и сборочных единиц подлежат немедленному устранению. В случае невозможности устранения выявленной неисправности или дефекта немедленно, необходимо эту неисправность пли дефект устранить при первой возможности.",c.photoID to R.drawable.unlocked)
        db.insert(tt.table_name, c.title to "3.9 Техническое обслуживание газотурбинных установок.", c.subtitle to "3.9.1 Общие указания.", c.detail to "1.4 Все операции по ТО и устранению неисправностей необходимо производить только на остановленном ГТД.",c.photoID to R.drawable.unlocked)

    }

    fun saveUser(db:SQLiteDatabase, email: String, password: Long, logIn: Int)
    {
        db.insert(ut.table_name, ut.email to email, ut.password to password, ut.login to logIn)
    }

    override fun onUpgrade(db: SQLiteDatabase, oldVersion: Int, newVersion: Int) {
        onCreate(db)
    }

    fun saveNote(db:SQLiteDatabase,date: Long, title: String, discription: String, ownerID: Int)
    {
        db.insert(nt.table_name, nt.date to date, nt.note_name to title, nt.discription to discription, nt.ownerID to ownerID)
    }

    fun deleteNote(db:SQLiteDatabase, id: Int)
    {
        db.delete(nt.table_name, "_id = " + id, null)
    }
 }

// Access property for Context
val Context.database: MyDatabaseOpenHelper
get() = MyDatabaseOpenHelper.getInstance(applicationContext)